<template>
	<view>
		<cu-custom @BackPageEvent="BackPageEvent" bgColor="bg-gradual-blue" :isBack="true">
				<block slot="content">特价审批</block>
		</cu-custom>
		<view>
			<block v-for="(item,index) in dataList" :key="index">
				<view class="grid-warp" @click="openDeatil(index)">
					<view class="grid-title">
						{{item.co_CustName==null? ' - ':item.co_CustName}}
						<view  class="cu-tag bg-red radius">未审核</view>
					</view>
					<view class="grid-body">
						<view class="grid-flex padding-10">
							<view>
								<text>单号:{{item.co_No}}</text>
							</view>
							<view>
								<text>日期:{{item.co_Date}}</text>
							</view>
						</view>
						<view class="grid-flex padding-10">
							<view>
								<text>纸质:{{item.co_ArtId}}</text>
							</view>
							<view>
								<text>愣别:{{item.co_ArtLB}}</text>
							</view>
						</view>
						<view class="grid-flex padding-10">
							<view>
								<text>&nbsp;</text>
							</view>
							<view>
								<text></text>
								<text class="text-price">{{item.co_SPecPrice}}</text>
							</view>
						</view>
					</view>
				</view>
			</block>
		</view>
	</view>
</template>

<script>
	import * as eventType from '@/libs/eventBusType'
	import baseMixin from '@/mixins'
	import {mapActions} from 'vuex'
	export default {
		name:'barginPrice',//特价审批
		mixins:[baseMixin],
		data() {
			return {
				needToUpdate:false,//是否需要重新刷新
				needToUpdateIndex:-1,
				dataList:[],//数据列表
			}
		},
		// #ifdef H5
		mounted () {
		   this.loadData()
		   let _self = this
		   //监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。
		   uni.$on(eventType.BackToPage_Refresh,(data)=>{
		          // console.log('监听到事件来自 update ，携带参数 msg 为：' + data.itemIndex);
				  _self.dataList.splice(data.itemIndex,1)
				  _self.needToUpdateIndex =data.itemIndex
				  _self.needToUpdate =true
		       })
		},
		beforeDestroy() {
			uni.$off(eventType.BackToPage_Refresh,function(data){
				        //console.log('destroyed 移除 eventType.BackToPage_Refresh 自定义事件');
				    })
		},
		// #endif
		// #ifndef H5
		onReady () {
			 this.loadData()
			 let _self = this
			 //监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。
			 uni.$on(eventType.BackToPage_Refresh,(data)=>{
			        // console.log('监听到事件来自 update ，携带参数 msg 为：' + data.itemIndex);
			 				  this.dataList.splice(data.itemIndex,1)
							   _self.needToUpdateIndex =data.itemIndex
							   _self.needToUpdate =true
			     })
		},
		onUnload(){
			// uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等
			// 使用时，注意及时销毁事件监听，比如，页面 onLoad 里边 uni.$on 注册监听，onUnload 里边 uni.$off 移除，或者一次性的事件，直接使用 uni.$once 监听
			uni.$off(eventType.BackToPage_Refresh,function(data){
				       // console.log('移除 eventType.BackToPage_Refresh 自定义事件');
				    })
		},
		// #endif
		methods: {
			...mapActions(['searchSpecPriceAction', 'approvePaperSpecPriceAction']),
			//点击返回时-回调事件
			BackPageEvent() {
				
				if(this.needToUpdate){
					//触发全局的自定事件。附加参数都会传给监听器回调。
					 uni.$emit(eventType.ReLoadData,{needToUpdate:this.needToUpdate})
				}
				
			},
			//查询特价审批 数据列表
			loadData(){
				let params ={
					
				}
				this.searchSpecPriceAction(params).then(res=>{
					//console.log(JSON.stringify(res))
					this.dataList = res.data
				}).catch(err=>{
					uni.showToast({
						title:'数据查询失败 err:'+err,
						icon:'none',
						duration:2000
					})
				})
			},
			//打开详细页面
			openDeatil(_id){
				uni.navigateTo(
					{
						url: './bpDetail?id='+_id
					}
				);
			}
		}
	}
</script>

<style>
.card{
	width:90%;
	margin-left: 5%;
	border-radius: 10rpx;
	padding: 30rpx;
}
.status{
	
}
.grid-title{
	display: flex;
	justify-content: space-between;
}
.text-price{
	color:#4AECDB;
	font-size: 50rpx;
}
</style>
