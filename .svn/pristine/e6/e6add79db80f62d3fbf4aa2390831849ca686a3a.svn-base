<script>
	import axios from '@/libs/api.request'
	import Vue from 'vue'
	export default {
		data(){
			return {
				currentVersion:'1.0',
			}
		},
		// 当uni-app 初始化完成时触发（全局只触发一次）
		onLaunch: function() {
			 this.getCurrentVersion()
			// this.checkVersionUpdate()
			//plus.screen.lockOrientation('portrait-primary'); //锁定
			uni.getSystemInfo({
				success: function(e) {
					//console.log('getSystemInfo:'+JSON.stringify(e))
					// #ifndef MP
					Vue.prototype.StatusBar = e.statusBarHeight;
					if (e.platform == 'android') {
						Vue.prototype.CustomBar = e.statusBarHeight + 50;
					} else {
						Vue.prototype.CustomBar = e.statusBarHeight + 45;
					};
					// #endif
			
					// #ifdef MP-WEIXIN
					Vue.prototype.StatusBar = e.statusBarHeight;
					let custom = wx.getMenuButtonBoundingClientRect();
					Vue.prototype.Custom = custom;
					Vue.prototype.CustomBar = custom.bottom + custom.top - e.statusBarHeight;
					// #endif		
			
					// #ifdef MP-ALIPAY
					Vue.prototype.StatusBar = e.statusBarHeight;
					Vue.prototype.CustomBar = e.statusBarHeight + e.titleBarHeight;
					// #endif
				}
			});
		},
		//当 uni-app 启动，或从后台进入前台显示
		onShow: function() {
			console.warn('App Show process.env.NODE_ENV：'+process.env.NODE_ENV)
			//console.log(Vue);

		},
		//当 uni-app 从前台进入后台
		onHide: function() {
			console.log('App Hide')
			//console.log(Vue);
		},
		//由于 onError 并不是完整意义的生命周期，所以只提供一个捕获错误的方法，在 app 的根组件上添加名为 onError 的回调函数即可
		onError (err) {
			   //debugger
		       console.error('ERP App onError...:'+err)
		},
		methods:{
				getCurrentVersion(){
					let _self=this
					// #ifdef APP-PLUS
					plus.runtime.getProperty( plus.runtime.appid, function ( wgtinfo ) {
					  //appid属性
					  var wgtStr = "appid:"+wgtinfo.appid;
					  //version属性
					  wgtStr += "<br/>version:"+wgtinfo.version;
					  _self.currentVersion = wgtinfo.version
					  //name属性
					  wgtStr += "<br/>name:"+wgtinfo.name;
					  //description属性
					  wgtStr += "<br/>description:"+wgtinfo.description;
					  //author属性
					  wgtStr += "<br/>author:"+wgtinfo.author;
					  //email属性
					  wgtStr += "<br/>email:"+wgtinfo.email;
					  //features 属性
					  wgtStr += "<br/>features:"+wgtinfo.features;
					  //console.log( wgtStr );
					  _self.checkVersionUpdate()
					} );
					// #endif
				},
		     	/*
				 * 版本号比较方法
				 * 传入两个字符串，当前版本号：curV；比较版本号：reqV
				 * 调用方法举例：compare("1.1","1.2")，将返回false
				 */
			     compareVersion(curV, reqV) {
				 console.log('==curV=reqV='+reqV,curV, reqV)
				  if (curV && reqV) {
				    //将两个版本号拆成数字
				    var arr1 = curV.split('.'),
				      arr2 = reqV.split('.');
				    var minLength = Math.min(arr1.length, arr2.length),
				      position = 0,
				      diff = 0;
				    //依次比较版本号每一位大小，当对比得出结果后跳出循环（后文有简单介绍）
				    while (position < minLength && ((diff = parseInt(arr1[position]) - parseInt(arr2[position])) == 0)) {
				      position++;
				    }
				    diff = (diff != 0) ? diff : (arr1.length - arr2.length);
				    //若curV大于reqV，则返回true
				    return diff > 0;
				  } else {
				    //输入为空
				    console.log("版本号不能为空");
				    return false;
				  }
				},
		
			 // 如果客户端的版本不是最新的,提示更新且自动下载最新的app
			async checkVersionUpdate () {
				
				// 这里最好使用原生的uniRequest请求方法【因为执行这段代码之前可能还没创建active_wallet对象】
				// {
					// "version":1.0.1,
					// "path":"http://pmc.szclsoft.com/app/sgV41.apk",
					// "note":"这里是更新说明",
					// "must":true
				// }
				// #ifdef APP-PLUS
				
				let requesUrl='http://pmc.szclsoft.com/update/version.json'
				let resData = await axios.request({
				 'Content-Type': 'application/json;charset=UTF-8',
				   url: requesUrl,
				   method: 'GET',
				 })
				 // 提醒用户更新
				 let currentVersion = this.currentVersion
			   
				 if (resData && resData.data) {
					 console.log(JSON.stringify(resData))
					  console.log('==plus.os.name=='+plus.os.name)
				 	if(plus.os.name =='Android'){
					let openUrl =  resData.data.path;
				 		//let currentVersion = plus.runtime.version
			  console.log('==currentVersion=='+currentVersion)
			   let needUpdate =!this.compareVersion(currentVersion+'',resData.data.version+'')
					 console.log('==needUpdate=='+needUpdate)
				 		if(needUpdate){
				 			// 提醒用户更新
				 			uni.showModal({
				 			    title: '更新提示',
				 				showCancel:!resData.data.must,
				 			    content: resData.data.note ? resData.data.note : "是否选择更新",
				 			    success: function (res) {
				 			        if (res.confirm) {
				 			            console.log('确定更新');
				 						// 最核心的地方,自动打开下载安装【且覆盖之前的安装】
				 						plus.runtime.openURL(openUrl);
				 			        } else if (res.cancel) {
				 			            console.log('取消更新');
				 			        }
				 			    }
				 			});
				 		}
				 	}
				 	
				 }
				
				// #endif
			}
		}
	}
</script>

<style>
	/*每个页面公共css */
	@import "common/grid.css";
	@import "colorui/main.css";
	@import "colorui/icon.css";
	@import "common/uni.css";
	/* @import "common/grid.css"; */
	/* //重置样式 */
	.cu-form-group {
		min-height: 39px;
	}
	.cu-form-group uni-input {
		    font-size: 12px;
	}
	.cu-form-group .title{
		font-size: 12px;
		height: 24px;
	    line-height: 24px; 
		    /* text-align: justify;
		    padding-right: 12px;
		    font-size: 12px;
		    position: relative;
		    height: 24px;
		    line-height: 24px; */
	}
	/*界面===主色*/
	.color-main-cl{
		color:#2fb3ff !important;
	}
	.cl-tableDesc{
		color: #007AFF;
	}
	.cl-modifyInput{
		border-bottom: 1px #09BB07 solid;
	}
</style>
