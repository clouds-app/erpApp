<template>
	<view>
		<cu-custom bgColor="bg-gradual-blue" :isBack="true">
				<block slot="content">装车出仓</block>
		</cu-custom>

		<!-- ===备货扫描=== -->
		<form>
		    <view ref="elForm" class="elForm" >
			<view class="flex border-top">
				<view class="flex-sub">
					<view class="cu-form-group">
						<view class="title">装车单号:</view>
						<input disabled  v-model="formItem.carGoodsNo" placeholder="暂无单号" name="input"></input>
					</view>
				</view>
				<view class="flex-sub">
					<view class="cu-form-group">
						<view class="title">码ㅤ头:</view>
						<input disabled v-model="formItem.hoverport" placeholder="暂无码头" name="input"></input>
					</view>
				</view>
			</view>
			<view class="flex border-top">
				<view class="flex-sub">
					<view class="cu-form-group">
						<view class="title">装车人:</view>
						<input disabled  v-model="formItem.driver" placeholder="暂无装车人" name="input"></input>
					</view>
				</view>
				<view class="flex-sub">
					<view class="cu-form-group">
						<view class="title">车牌号:</view>
						<input disabled v-model="formItem.licensePlate" placeholder="暂无车牌号" name="input"></input>
					</view>
				</view>
			</view>
		   	<view class="cu-form-group border-top">
		   		<view class="title">卡板号:</view>
		   		<input ref="kuWeiInput" v-model="formItem.cardBoardNo" @blur="spFreshCarListForAPP" placeholder="请扫描卡板号" name="input"></input>
		   		<button :loading="false" :disabled="formItem.carGoodsNo==''" type="" @click="turnOnScanCode('cardBoardNo')" class='cu-btn bg-green shadow'>扫描</button>
		   	</view>
			<!-- <view class="cu-form-group border-top">
				<view class="cl-tableDesc">纸板明细清单</view>
			
			</view> -->
		   </view>
		</form>
		<view class="bingStorage-zTable">
			<!-- -->
			<zTable :showSelect="false" :singleSelect="true" onClickCheck='onClickCheck'  :stickSide="true"  @onClick="onClickRowEvent"    :tableHeight="tableHeight"  :showLoading="false" :emptyText="errorContent" :tableData="cardBoardNoInfoData" :columns="cardBoardNoInfoColumns"></zTable>
		</view>
		<!--  侧边搜索列表 -->
		<searchForm @getSelectDataInfo="getSelectDataInfo" :dataSource="dataSource" ref='searchForm'></searchForm>
		<alertBox ref='alertBox' :msgContent="msgContent" :toShowModal="toShowModal" @cancelModal="cancelModal" @comfirmModal="comfirmModal"></alertBox>
		
		<!-- 操作 按钮 -->
	<view ref="elBtn"  class="elBtn margin-text-center">
					<view  class="flex  p-xs ">
						
						<view  class="flex-sub radius">
						
						</view> 
						<view  class="flex-sub margin-left margin-right radius">
					
						</view>
						<view  class="flex-sub  radius"> 
								<button @tap="preSubmitDataList()" :loading="false" :disabled="canSaveData" type="" class="cu-btn block bg-green lg" >{{saveBtnTitle}}</button>
						</view>
						
					</view>
		</view>
	</view>
	
</template>

<script>
	import alertBox from '@/components/color-ui-dialog/color-ui-dialog.vue'
	import zTable from "@/components/z-table/z-table.vue"
	import uniIcon from "@/components/uni-icon/uni-icon.vue"
	import searchForm from '@/components/searchForm/searchDataList.vue.vue'
	import baseMixin from '@/mixins'
	import {mapActions} from 'vuex'
	import uniPopup from "@/components/uni-popup/uni-popup.vue"
	const defaultformItem={
					cardBoardNo:'',//卡板号
					carGoodsNo:'',//装车单号
					hoverport:'', // 装车码头
					driver:'',// 装车人
					licensePlate:''// 车牌
					
				}
	export default {
		name:'loadGoodsUp',//纸板入库卡板、工单扫描
		mixins:[baseMixin],
		components:{zTable,uniPopup,searchForm,uniIcon,alertBox},
		data() {
			return {
				hasLoadGoodsDone:false,// 是否备货完成
				saveBtnTitle:'完成',
				carNoList:[], // 装车单号列表
				carNoItem:{}, // 当前默认第一个装车
				// 领取装车单 实体
				editItem:{
					loadCarNo:'', // 装车单号
					hoverport:'', // 装车码头
					hoverportID:'' // 装车码头ID
				},
				hoverportList:[],// 码头列表
				scanCard:{}, // 卡板号缓存列表
				currentAction:'', // 当前操作弹框 类型
				currentSelect:'hoverportList',// 当前选择的弹框 回调类型
				dataSource:[],//搜索列数据原
				toShowModal:false,// 是否显示确认弹框
				msgContent:'',//弹框内容信息
				scanType:'',//当前扫描类型
				tableHeight:400,//表格高度
				errorContent:'暂无数据',//数据为空时 显示内容
				cardBoardNoInfoData:[], // 纸板明细清单 列表
				cardBoardNoInfoClone:{},//数组转换,转换成{工单号:数据的格式}
				// 表格列头格式和类型
				cardBoardNoInfoColumns: 
				[
					{
						key: 'OrderNo',
						title: '工单号',
						width: 180
					}, 
					
					{
						key: 'Qty',
						title: '需装数',
						width: 100
					}, 
					{
						key: 'ScanQty',
						title: '扫描数',
						width: 100
					}, 
					{
						key: 'CustName',
						title: '客户',
						width: 180
					}, 
					{
						key: 'StationNo',
						title: '库位',
						width: 180
					}, 
					{
						key: 'ArtID',
						title: '纸质',
						width: 160
					}, 
					{
						key: 'Size',
						title: '规格',
						width: 160
					}, 
					{
						key: 'MinSize',
						title: '小尺寸',
						width: 160
					}, 
					{
						key: 'ZoneName',
						title: '地区',
						width: 100
					}, 
					{title:'操作',listenerClick:true, width: 80,titleAlign:'center',columnAlign:'center',
					format: {
						template: "详细",
						names: []
					}}
				],
				// 表单实体
				formItem:Object.assign({},defaultformItem),
				catchFlag:false,
				cardScanQtyItems:{}
			}
		},
		computed:{
			// 是否可以点击保存/完成
			canSaveData(){
				return this.cardBoardNoInfoData.length == 0
			},
			
			
		},
		
		// #ifdef H5
		mounted () {
			this.messageRegister()
			this.getTableHeight()
		},
		// #endif
		// #ifndef H5
		onReady () {
			this.messageRegister()
			this.getTableHeight()
		},
		// #endif
		methods: {
			
			// 首次加载 领取的备货 列表
			loadDataByUser(){
				let params = {
					// 当前登陆用户名称
					UserID:this.$store.getters.userInfo_getters, 
				}
				this.$store.dispatch('getLoadGoodsUpAction',params).then(res=>{
					if(res){
				
					}
				}).catch(err=>{
					uni.showToast({
						title:'加载领取的备货列表失败:'+err,
						icon:'none',
						duration:2000
					})
				})
			},			
			// 验证是否备货完成
			checkIsDoneOrNot(){
				let _self = this
				if(this.cardBoardNoInfoData.length>0){
				 //every（）方法必须所有都返回true才会返回true，哪怕有一个false，就会返回false
				 this.hasLoadGoodsDone=	this.cardBoardNoInfoData.every((item)=>{
						return (item.Qty==item.ScanQty)
					})
				}
				// 备货完成,修改提交按钮标题
				if(this.hasLoadGoodsDone){
					this.saveBtnTitle ='完成'
				}
			},
			
			//查询 纸板明细清单 BY 装车单号
			getCardBoardNoInfo() {
				this.cardBoardNoInfoData= []
				if (this.formItem.carGoodsNo == '') {
					return;
				}
				let data = {
					procName:'spGetPaperCarListInfoForAPP',
					params:{
						UserID:this.$store.getters.userInfo_getters, // 当前登陆用户名称
						CarListNo:this.formItem.carGoodsNo
					}
				}
				this.$store.dispatch('getExecuteDropDownDetailsAction',data).then(res => {
					if (res && res.list.length > 0) {
						this.cardBoardNoInfoData = res.list;
						this.formItem.originalKuNo = this.cardBoardNoInfoData[0].ap_StationNo;
						this.cardBoardNoInfoData.forEach((item,index)=>{
							this.cardBoardNoInfoClone[item.OrderNo] = item;
						})
					}else{
						uni.showToast({
							title:'没有该卡板对应的数据',
							icon:'none',
							duration:2000
						})
					}
				}).catch(err => {
					uni.showToast({
						title:'获取清单数据失败:' + err,
						icon:'none',
						duration:2000
					})

				})
			},
		
			// 打开修改弹框
			openPopup(){
				this.$refs.popup.open()
			},
			// 关闭修改弹框
			closePopup(){
				this.$refs.popup.close()
			},
			// 暂存/完成出仓
			submitDataList(){
				if(this.hasLoadGoodsDone){
					//this.hasLoadGoodsDone=false
					uni.navigateTo({
					 url: './loadGoodsDownDetail?carListNo=' + this.formItem.carGoodsNo
					});
				}else{
					this.saveDataInToDone()
				}
			},
			//保存数据-暂存
			saveDataInToPendding(){
				let params ={
					
				}
				this.$store.dispatch('saveDataInToPenddingAction',params).then(res=>{
					
				}).catch(err=>{
					
				})
			},
			//保存数据-完成
			saveDataInToDone(){
				let params ={
					
				}
				this.$store.dispatch('saveDataInToDoneAction',params).then(res=>{
					
				}).catch(err=>{
					
				})
			},
			// 单钩单选框 触发事件
			onClickCheck(rowItem){
				//  debugger
							
			},
			//查看详细
			onClickRowEvent(rowItem){	
				uni.navigateTo({
				    url: `./../loadGoodsUp/loadGoodsUpDetail?orderNo=${rowItem.OrderNo}&cardNo=${rowItem.CardNo}&scanQty=${rowItem.ScanQty}`
				});
			},
			
			
			// 选择  装车单号  数据回调事件
			getSelectDataInfo(item){
				//debugger
				switch (this.currentSelect){
					case 'hoverportList':
					    // 确认选择码头
						this.editItem.hoverport=item.ct_Desc 
						this.editItem.hoverportID=item.type 
						break;
					default:
						break;
				}
			
			},
			// 添加数据源 到 选择列表
			setSearchDataListSource(){
				this.$refs['searchForm'].isShowSearchList=true
				this.$refs['searchForm'].dataSourceList =this.hoverportList
				this.dataSource =this.hoverportList
			},
			//确认弹框-提交工单列表信息
			comfirmModal(val){
				this.toShowModal =false
				switch (this.currentAction){
					case 'preSubmitDataList':
						this.SubmitDataList()
						break;	
					case 'preSelectHoverport':
						this.handleDataWhenGotHoverport()
						break;	
					case 'preCompetitionForOrders':
						 // 每次切换装车清单时,清空数据卡板号缓存列表
						 this.scanCard={}
						 // 加载装车单号列表
						 this.loadCarGoodsNoList()
						break;		
					default:
						break;
				}
			},
			// 取消弹框
			cancelModal(val){
				this.toShowModal =false
				// switch (this.currentAction){
				// 	case 'cardBoardNotNull':
				// 	    this.formItem.cardBoardNo =this.tempScanCode
				// 	    this.loadHoverportList()
				// 		break;			
				// 	default:
				// 		break;
				// }
			},
	
			// 设置显示屏高度分配
			async getTableHeight(){
						 // debugger
						  let _self=this
						  let tempHeight =  _self.setTableHeight()
						  let otherHeight= await _self.getOtherContentHeight("elForm") 
						  let otherHeight2 = await _self.getOtherContentHeight("elBtn")
						  if(otherHeight!=null && otherHeight2!=null){
						  	
						  	_self.tableHeight =tempHeight-otherHeight-otherHeight2-20
						  }
					
						},
			
			//页面通讯,事件注册
			messageRegister(){
			  // 初始化数据
			  this.formItem.driver = this.$store.getters.userInfo_getters
			},
			// 扫描卡板号 赋值 对应的 工单号 更新 扫描数量
			spFreshCarListForAPP (){
					 let _self=this
					//存在说明已经扫过了,不能再扫了
					if(this.formItem.cardBoardNo == ''){
						return;
					}
					let currentScan = ''+this.formItem.cardBoardNo;
					if(this.scanCard[currentScan]){
						uni.showToast({
							title:`${this.formItem.cardBoardNo}卡板号已经被扫描了`,
							icon:'none',
							duration:2000
						});
						this.formItem.cardBoardNo = '';
						return;
					}
					//获取该卡板上每	个订单的扫描数，前端根据工单号更新相应的扫描数
					let params = {
					   procName:'spFreshCarListForAPP',
					   params:{
						// 当前登陆用户名称
						UserID:this.$store.getters.userInfo_getters,
						CardNo:this.formItem.cardBoardNo,  // 卡板号
						CarListNo:this.formItem.carGoodsNo, // 装车单号
						Type:'A' // 类型 固定
					   }
					}
					this.$store.dispatch('getExecuteDropDownAction',params).then(res=>{
						_self.getCardBoardNoInfo() //重新查询 刷新界面
						_self.formItem.cardBoardNo = '';
						_self.scanCard[currentScan] ='A';
						// 验证是否备货完成,每次变更都要 重新验证
						_self.checkIsDoneOrNot()
						
					}).then(err=>{
						
					})
			},
			
			//===打开扫描===
			turnOnScanCode(type){
					this.scanType = type
					let _self =this
					// 调起条码扫描
					uni.scanCode({
					    scanType: 'barCode', // 固定条形码
					    success: function (res) {
					       // console.log('条码内容：' + res.result);
							switch (type){
								case 'cardBoardNo': 
								    //卡板号
								    _self.formItem.cardBoardNo = res.result
									_self.spFreshCarListForAPP();
									break;
							
								default:
									break;
							}
						
					    }
					});
				}
			
			
		}
	}
</script>

<style>
	.margin-text-center{
		text-align: center;
		margin: 20rpx;
	}
	.border-top{
		  border-top: 1px solid #eee;
	}
	.border-bottom-line{
		  border-bottom: 1px solid #eee;
	}
.cu-form-group .title {
		min-width: calc(4em + 15px);
	}
</style>
